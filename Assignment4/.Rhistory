help.start()
eq1 = function(x){0.5 * x*x}
eq2 = function(x){6*x*log2(x)+6*x}
curve(eq1, from = 1, to=30, xlab="x", ylab="y")
curve(eq2, from = 1, to=30, xlab="x", ylab="y")
curve(eq1, eq2, from = 1, to=30, xlab="x", ylab="y")
library(ggplot2)
eq1 <- function(x){0.5 * x*x}
eq2 <- function(x){6*x*log2(x)+6*x}
df=data.frame(x=1:50, values=c(eq1(1:50), eq2(1:50), fun=rep(c("function1", "function2")))
ggplot(df, aes(x, values, col=fun)) + geom_line()
df=data.frame(x=1:50, values=c(eq1(1:50), eq2(1:50)), fun=rep(c("function1", "function2"))
ggplot(df, aes(x, values, col=fun)) + geom_line()
eq1 = function(x){0.5 * x*x}
eq2 = function(x){6*x*log2(x)+6*x}
curve(eq1, from = 1, to=30, xlab="x", ylab="y")
curve(eq2, from = 1, to=30, xlab="x", ylab="y")
curve(eq1, from = 1, to=100, xlab="x", ylab="y")
curve(eq2, from = 1, to=100, xlab="x", ylab="y")
eq1 = function(x){15 * x**2}
eq2 = function(x){8 * x**3}
eq3 = function(x){2**x}
eq4 = function(x){3**x}
eq5 = function(x){x!}
eq6 = function(x){x * log2(x)}
eq5 = function(x){
factorial = 1
for(i in 1:x){
factorial = factorial * i
}
return factorial
eq5 = function(x){factorial(x)}
eq6 = function(x){x * log2(x)}
curve(eq1, from = 2, to=20, xlab="n", ylab="15n^2")
curve(eq2, from = 2, to=20, xlab="n", ylab="8n^3")
curve(eq3, from = 2, to=20, xlab="n", ylab="2^n")
curve(eq4, from = 2, to=20, xlab="n", ylab="3^n")
curve(eq5, from = 2, to=20, xlab="n", ylab="n!")
curve(eq6, from = 2, to=20, xlab="n", ylab="nlogn")
curve(eq1, from = 2, to=20, xlab="n", ylab="15n^2")
y=((x-1)(x-2))/2
curve(((x-1)(x-2))/2, xlim=c(2,50))
curve(((x-1)(x-2))/2, xlim=c(2,50))
getwd()
curve(((x-1)(x-2))/2, xlim=c(2,50))
curve(x^2, xlim(c(2,50)))
curve(x^2, xlim=(c(2,50)))
curve(0.5(x^2-3x+2), xlim=(c(2,50)))
curve(0.5x^2-1.5x+1, xlim=(c(2,50)))
curve(0.5x^2-1.5x+1, xlim=(c(2,50))
curve(0.5x^2-1.5x+1, xlim=(c(2,50))))
curve(0.5*x^2-1.5*x+1, xlim=(c(2,50)))
curve(0.5*x^2-1.5*x+1, xlim=(c(2,50)), ylab="T(n)", xlab="n")
curve(0.75*x^2, xlim(c(2,50)), add=TRUE)
curve(0.75*x^2, xlim=(c(2,50)), add=TRUE)
curve(0.75*x^2, xlim=(c(2,50)), add=TRUE, color="Red")
curve(0.75*x^2, xlim=(c(2,50)), add=TRUE, colour="Red")
curve(0.75*x^2, xlim=(c(2,50)), add=TRUE, col="Red")
curve(0.125*n^2, xlim=(c(2,50)), col="Green", add=TRUE)
curve(0.125*x^2, xlim=(c(2,50)), col="Green", add=TRUE)
legend(col=c("T(n)", "f1(x)", "f2(x)"))
dbinom(6, 10, 0.5)
pbinom(7, 10, 0.5) - pbinom(2, 10, 0.5)
1 - pbinom(6, 10, 0.5)
pbinom(7, 10, 0.5)
pbinom(6, 10, 0.5) - pbinom(2, 10, 0.5)
pbinom(6, 10, 0.5) - pbinom(3, 10, 0.5)
dbinom(4, 10, 0.5) + dbinom(5, 10, 0.5) + dbinom(6, 10, 0.5)
pnorm(8, 10, 5) - pnorm(3, 10, 5)
1 - pnorm(11, 10, 5)
dnorm(0, 10, 5)
?dnorm()
pnorm(10, 10, 50)
dnorm(2, 10, 5)
1 - pnorm(20,20,6)
pnorm(5, 10, 10)
1 - pnorm(0.5)
0.5 - pnorm(10,20,10)
choose(10,8)
1 - pnorm(12, 10, 5)
pnorm(14, 10, 5) - pnorm(8, 10, 5)
qnorm(0.6, 10, 5)
qbeta(2, 4, 0.7)
?qbeta()
qbeta(2,4)
pbeta(2,4,0.7)
pnorm(7.5, 5, sqrt(10 * 0.5 * 0.5))
sqrt((4*4)+(9*16))
(4*4) + (9*16)
0.05 / 0.4
3 / 4
y = c(2,2,3,5)
t.test(y)
t.test(y, conf.level = 0.8)
set.seed(24); y1=rnorm(30,10,5)
set.seed(34); y2=rnorm(25,11,5)
t.test(y1, y2, var.equal=TRUE, mu=0, conf.level=0.90)
set.seed(24); y1=rnorm(8,10,20)
set.seed(34); y2=rnorm(10,11,21)
var.test(y1,y2)
devtools::install_github("https://github.com/MATHSTATSOU/Intro2R.git", build_vignettes = TRUE,force = TRUE)
install.packages("devtools")
devtools::install_github("https://github.com/MATHSTATSOU/Intro2R.git", build_vignettes = TRUE,force = TRUE)
find.package(Intro2R)
setwd("C:/Users/EaoR/developer/MATH-4753/Assignment4")
getwd()
data <- read.csv("NZBIRDS.csv")
head(data)
sam <- sample(nrow(data), 35)
rand_sam <- data[sam, ]
View(data)
View(rand_sam)
install.packages(c("digest", "htmltools", "renv", "rsconnect"))
t.test(rand_sam)
?t.test()
t.test(rand_sam, mu = 0)
t.test(rand_sam$Body.Mass, mu = 0)
t.test(rand_sam$Egg.Length)
?rt()
set.seed(10); y1 <- rnorm(100, mean = 1312, sd = 422)
set.seed(20); y2 <- rnorm(47, mean = 1352, sd = 271)
t.test(y1, y2, var.equal = FALSE, conf.level = 0.9)
var.test(y1, y2)
var.test(y1, y2, conf.level = 0.9)
y <- read.csv("ROUGHPIPE.csv")
t.test(y, mu = 2)
y <- read.csv("WISCLAKES.csv")
t.test(y$DOC, mu = 15)
theta.null <- mean(y) + qnorm(0.05) * sd(y)
theta_null <- mean(y) + qnorm(0.05) * sd(y)
theta.null = mean(y) + qnorm(0.05) * sd(y)
theta.null = mean(y$DOC) + qnorm(0.05) * sd(y$DOC)
theta.alt = 14
1 - pnorm((theta_null - theta_alt)/ sd(y$DOC))
1 - pnorm((theta.null - theta_alt)/ sd(y$DOC))
1 - pnorm((theta.null - theta.alt)/ sd(y$DOC))
pnorm((theta.null - theta.alt)/ sd(y$DOC), lower.tail = FALSE)
library(dplyr)
data <- read.csv("ORCHARD.csv")
fog <- data %>% filter(CONDITION = "Fog")
cl <- data %>% filter(CONDITION = "Clear" || CONDITION = "Cloudy")
fog <- data %>% filter(CONDITION == "Fog")
cl <- data %>% filter(CONDITION == "Clear" || CONDITION == "Cloudy")
cl <- data %>% filter(CONDITION == "Clear" | CONDITION == "Cloudy")
t.test(fog, cl)
head(data)
fog <- data %>% filter(CONDITION == "FOG")
cl <- data %>% filter(CONDITION == "CLEAR" | CONDITION == "CLOUDY")
t.test(fog, cl)
t.test(fog$RATIO, cl$RATIO)
t.test(fog$RATIO, cl$RATIO, var.equal = TRUE)
data <- read.csv("GASTURBINE.csv")
head(data)
View(data)
trad <- data %>% filter(ENGINE == "Traditional")
aero <- data %>% filter(ENGINE == "Aeroderiv")
t.test(trad, aero, var.equal = TRUE)
View(data)
var.test(trad$HEATRATE, aero$HEATRATE)
t.test(trad$HEATRATE, aero$HEATRATE, var.equal = TRUE)
data <- read.csv("GOBIANTS.csv")
View(data)
gobi <- filter(Region == "Gobi Desert")
gobi <- data %>% filter(Region == "Gobi Desert")
dry <- data %>% filter(Region == "Dry Steppe")
t.test(gobi$AntSpecies, dry$AntSpecies)
data <- read.csv("THRUPUT.csv")
View(data)
View(data)
t.test(data$HUMAN, data$AUTO)
