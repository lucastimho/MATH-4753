}
nd <- round(optimise(objective, interval = c(1, N), maximum = FALSE)$minimum)
# Calculating nc using the normal approximation
# We want to solve N - n*(1 - pnorm(1, mean = n*p, sd = sqrt(n*p*(1-p)))) = 0 for n
objective <- function(n) {
return(N - n*(1 - pnorm(1, mean = n*p, sd = sqrt(n*p*(1-p)))))
}
nc <- round(optimise(objective, interval = c(1, N), maximum = FALSE)$minimum)
# Plotting objective function vs n
n_seq <- seq(1, N, by = 1)
objective <- 1 - gamma - pnorm(1, mean = n_seq * p, sd = sqrt(n_seq * p * (1 - p)))
plot(n_seq, objective, type = "l", xlab = "Number of tickets", ylab = "Objective function")
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(N = 400, gamma = 0.02, p = 0.95)
# Install and load required packages
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(ggplot2)
# Function to calculate the number of tickets and create plots
ntickets <- function(N, gamma, p) {
# Calculate the number of tickets using qbinom
n <- qbinom(p, size = N, prob = 1 - gamma)
# Create a plot of n Vs gamma
plot1 <- ggplot(data.frame(gamma = seq(0, 1, 0.01)), aes(x = gamma)) +
geom_line(y = qbinom(p, size = N, prob = 1 - gamma), color = "blue") +
labs(title = "Number of Tickets vs. Gamma",
x = "Gamma",
y = "Number of Tickets")
# Create a plot of n Vs p
plot2 <- ggplot(data.frame(p = seq(0, 1, 0.01)), aes(x = p)) +
geom_line(y = qbinom(p, size = N, prob = 1 - gamma), color = "green") +
labs(title = "Number of Tickets vs. p",
x = "p",
y = "Number of Tickets")
# Print the plots
print(plot1)
print(plot2)
# Print the named list
result <- list(n = n, N = N, p = p, gamma = gamma)
print(result)
}
# Test the function
ntickets(N = 400, gamma = 0.02, p = 0.95)
ntickets <- function(N, gamma, p) {
nd <- NULL # number of tickets with discrete distribution
nc <- NULL # number of tickets with normal approximation
# Calculating nd using the binomial distribution
# We want to solve N - qbinom(gamma, N, p) = 0 for n
objective <- function(n) {
return(N - qbinom(gamma, n, p))
}
nd <- round(optimise(objective, interval = c(1, N), maximum = FALSE)$minimum)
# Calculating nc using the normal approximation
# We want to solve N - n*(1 - pnorm(1, mean = n*p, sd = sqrt(n*p*(1-p)))) = 0 for n
objective <- function(n) {
return(N - n*(1 - pnorm(1, mean = n*p, sd = sqrt(n*p*(1-p)))))
}
nc <- round(optimise(objective, interval = c(1, N), maximum = FALSE)$minimum)
# Plotting objective function vs n
n_seq <- seq(1, N, by = 1)
objective <- 1 - gamma - pnorm(1, mean = n_seq * p, sd = sqrt(n_seq * p * (1 - p)))
plot(n_seq, objective, type = "l", xlab = "Number of tickets", ylab = "Objective function")
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(N = 400, gamma = 0.02, p = 0.95)
ntickets <- function(N, gamma, p) {
# Function to calculate number of tickets using discrete distribution
nd <- function(N, gamma, p) {
sum <- 0
for (n in 0:(N - 1)) {
sum <- sum + dbinom(n, N, p) * pbinom(N - 1, n, gamma)
}
return(N * sum)
}
# Function to calculate number of tickets using normal approximation
nc <- function(N, gamma, p) {
mean <- N * p
sd <- sqrt(N * p * (1 - p))
return(pnorm(N - 1, mean, sd) * (1 - pnorm(gamma * N, mean, sd)))
}
# Calculate nd and nc
nd_result <- nd(N, gamma, p)
nc_result <- nc(N, gamma, p)
# Print named list
print(list(nd = nd_result, nc = nc_result, N = N, p = p, gamma = gamma))
# Create plot for discrete distribution
objective_function_discrete <- function(n) {
return(1 - gamma - pbinom(n, N, p))
}
n_values <- 0:N
plot(n_values, objective_function_discrete(n_values), type = 'l', col = 'blue',
xlab = 'Number of Tickets (n)', ylab = 'Objective Function',
main = 'Objective Function Vs n (Discrete Distribution)')
# Create plot for normal approximation
objective_function_continuous <- function(n) {
mean <- N * p
sd <- sqrt(N * p * (1 - p))
return(1 - gamma - pnorm(n, mean, sd))
}
plot(n_values, objective_function_continuous(n_values), type = 'l', col = 'red',
xlab = 'Number of Tickets (n)', ylab = 'Objective Function',
main = 'Objective Function Vs n (Normal Approximation)')
}
# Example usage:
ntickets(150, 0.05, 0.8)
ntickets <- function(N, gamma, p) {
# Discrete Distribution Calculation
nd <- 0
while (pbinom(N, nd, p) >= gamma) {
nd <- nd + 1
}
# Normal Approximation Calculation
mu <- nd * p
sigma <- sqrt(nd * p * (1 - p))
nc <- uniroot(function(n) 1 - gamma - pnorm(N, mu, sigma, lower.tail = FALSE), interval = c(0, nd + 1))$root
# Print Results
results <- list(nd = nd, nc = nc, N = N, p = p, gamma = gamma)
print(results)
# Create Plots
n_values <- seq(0, nd + 1, length.out = 100)
# Discrete Objective Function
obj_d <- pbinom(N, n_values, p) - gamma
plot(n_values, obj_d, type = "l", xlab = "n", ylab = "Objective Function (Discrete)", main = "Discrete Objective Function")
abline(h = 0, col = "red")
# Continuous Objective Function
mu_values <- n_values * p
sigma_values <- sqrt(n_values * p * (1 - p))
obj_c <- 1 - gamma - pnorm(N, mu_values, sigma_values, lower.tail = FALSE)
plot(n_values, obj_c, type = "l", xlab = "n", ylab = "Objective Function (Normal Approx.)", main = "Normal Approximation Objective Function")
abline(h = 0, col = "red")
}
ntickets(200, 0.02, 0.95)
ntickets(400, 0.02, 0.95)
f <- function (x, a) (x - a)^2
xmin <- optimize(f, c(0, 1), tol = 0.0001, a = 1/3)
xmin
## See where the function is evaluated:
optimize(function(x) x^2*(print(x)-1), lower = 0, upper = 10)
## "wrong" solution with unlucky interval and piecewise constant f():
f  <- function(x) ifelse(x > -1, ifelse(x < 4, exp(-1/abs(x - 1)), 10), 10)
fp <- function(x) { print(x); f(x) }
plot(f, -2,5, ylim = 0:1, col = 2)
optimize(fp, c(-4, 20))   # doesn't see the minimum
optimize(fp, c(-7, 20))   # ok
ntickets <- function(N, gamma, p) {
nd <- NULL # number of tickets with discrete distribution
nc <- NULL # number of tickets with normal approximation
# Calculating nd using the binomial distribution
# We want to solve N - qbinom(gamma, N, p) = 0 for n
objective <- function(n) {
return(N - qbinom(gamma, n, p))
}
nd <- round(optimise(abs(objective), interval = c(1, N), maximum = FALSE)$minimum)
# Calculating nc using the normal approximation
# We want to solve N - n*(1 - pnorm(1, mean = n*p, sd = sqrt(n*p*(1-p)))) = 0 for n
objective <- function(n) {
return(N - n*(1 - pnorm(1, mean = n*p, sd = sqrt(n*p*(1-p)))))
}
nc <- round(optimise(abs(objective), interval = c(1, N), maximum = FALSE)$minimum)
# Plotting objective function vs n
n_seq <- seq(1, N, by = 1)
objective <- 1 - gamma - pnorm(1, mean = n_seq * p, sd = sqrt(n_seq * p * (1 - p)))
plot(n_seq, objective, type = "l", xlab = "Number of tickets", ylab = "Objective function")
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(400, 0.02, 0.95)
ntickets(400, 0.02, 0.95)
ntickets <- function(N, gamma, p) {
nd <- NULL # number of tickets with discrete distribution
nc <- NULL # number of tickets with normal approximation
# Calculating nd using the binomial distribution
# We want to solve N - qbinom(gamma, N, p) = 0 for n
objective <- function(n) {
return(N - qbinom(gamma, n, p))
}
nd <- round(optimise(objective, interval = c(1, N), maximum = FALSE)$minimum)
# Calculating nc using the normal approximation
# We want to solve N - n*(1 - pnorm(1, mean = n*p, sd = sqrt(n*p*(1-p)))) = 0 for n
objective <- function(n) {
return(N - n*(1 - pnorm(1, mean = n*p, sd = sqrt(n*p*(1-p)))))
}
nc <- round(optimise(objective, interval = c(1, N), maximum = FALSE)$minimum)
# Plotting objective function vs n
n_seq <- seq(1, N, by = 1)
objective <- 1 - gamma - pnorm(1, mean = n_seq * p, sd = sqrt(n_seq * p * (1 - p)))
plot(n_seq, objective, type = "l", xlab = "Number of tickets", ylab = "Objective function")
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(400, 0.02, 0.95)
ntickets <- function(N, gamma, p) {
nd <- NULL # number of tickets with discrete distribution
nc <- NULL # number of tickets with normal approximation
# Calculating nd using the binomial distribution
objective <- function(n) {
return(abs(N - qbinom(1 - gamma, n, p)))
}
nd <- N + round(optimise(objective, interval = c(N, N * 1.1), maximum = FALSE)$minimum)
# Calculating nc using the normal approximation
objective <- function(n) {
return(abs(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p)))))
}
nc <- N + round(optimise(objective, interval = c(N, N * 1.1), maximum = FALSE)$minimum)
# Plotting objective function vs n
n_seq <- seq(1, N, by = 1)
objective <- 1 - gamma - pnorm(1, mean = n_seq * p, sd = sqrt(n_seq * p * (1 - p)))
plot(n_seq, objective, type = "l", xlab = "Number of tickets", ylab = "Objective function")
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(400, 0.02, 0.95)
ntickets <- function(N, gamma, p) {
nd <- NULL # number of tickets with discrete distribution
nc <- NULL # number of tickets with normal approximation
# Calculating nd using the binomial distribution
objective <- function(n) {
return(abs(N - qbinom(1 - gamma, n, p)))
}
nd <- round(optimise(objective, interval = c(N, N * 1.1), maximum = FALSE)$minimum)
# Calculating nc using the normal approximation
objective <- function(n) {
return(abs(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p)))))
}
nc <- round(optimise(objective, interval = c(N, N * 1.1), maximum = FALSE)$minimum)
# Plotting objective function vs n
n_seq <- seq(1, N, by = 1)
objective <- 1 - gamma - pnorm(1, mean = n_seq * p, sd = sqrt(n_seq * p * (1 - p)))
plot(n_seq, objective, type = "l", xlab = "Number of tickets", ylab = "Objective function")
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(400, 0.02, 0.95)
setwd("~/MATH-4753-Stats/Lab1")
##Task 2
ddt <- read.csv("DDT.csv")
#Is this the plot of LENGTH vs WEIGHT from the ddt data frame?
plot(data=ddt, LENGTH~WEIGHT)
ntickets <- function(N, gamma, p) {
n_values <- c(N, N * 1.1)
# Calculating nd using the binomial distribution
objective <- function(n) {
return(abs(N - qbinom(1 - gamma, n, p)))
}
nd <- round(optimise(objective, interval = n_values, maximum = FALSE)$minimum)
# Plotting discrete objective function vs n
objective_discrete <- function(n) {
return(N - qbinom(1 - gamma, n, p))
}
plot(n_values, objective_discrete(n_values), type='b', col="blue", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nd, ") gamma =", gamma, "N =", N, "discete"))
points(n_values, objective_function_discrete(n_values), col = 'black', pch = 19)
# Calculating nc using the normal approximation
objective <- function(n) {
return(abs(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p)))))
}
nc <- optimise(objective, interval = n_values, maximum = FALSE)$minimum
# Plotting continous objective function vs n
objective_continous <- function(n) {
return(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p))))
}
plot(n_values, objective_continous(n_values), type='b', col="black", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nc, ") gamma =", gamma, "N =", N, "continous"))
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(400, 0.02, 0.95)
ntickets <- function(N, gamma, p) {
n_values <- c(N, N * 1.1)
# Calculating nd using the binomial distribution
objective <- function(n) {
return(abs(N - qbinom(1 - gamma, n, p)))
}
nd <- round(optimise(objective, interval = n_values, maximum = FALSE)$minimum)
# Plotting discrete objective function vs n
objective_discrete <- function(n) {
return(N - qbinom(1 - gamma, n, p))
}
plot(n_values, objective_discrete(n_values), type='b', col="blue", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nd, ") gamma =", gamma, "N =", N, "discete"))
points(n_values, objective_discrete(n_values), col = 'black', pch = 19)
# Calculating nc using the normal approximation
objective <- function(n) {
return(abs(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p)))))
}
nc <- optimise(objective, interval = n_values, maximum = FALSE)$minimum
# Plotting continous objective function vs n
objective_continous <- function(n) {
return(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p))))
}
plot(n_values, objective_continous(n_values), type='b', col="black", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nc, ") gamma =", gamma, "N =", N, "continous"))
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(400, 0.02, 0.95)
myddt <- function(df,SPECIES)
{
library(ggplot2)
## ggplot for plots
library(dplyr)
## Import dpylr for wrangling data
newdf <- df %>% filter(SPECIES == {{SPECIES}})
## Create new data frame using {{SPECIES}} from function call
g = ggplot(newdf, aes(x = WEIGHT, y= LENGTH)) + geom_point(aes(col = RIVER)) +
geom_smooth(formula = y~x +I(x^2), method = "lm") + ggtitle("Dr Do a LOT")
## Scatter plot with quadratic curve of sub-set data. Points are color coded by river.
print(g)
## Print plot
write.csv(x = newdf,
file = paste0("LvsWfor", SPECIES,".csv"),
row.names = FALSE
)
## Write a csv file for SPECIES
listof3 = list(df = df,newdf = newdf, tab = table(df$RIVER)/length(df$RIVER))
## Create list of 3 required objects
return(listof3)
## Return to the command line a list of 3.
}
library(Intro2R)
obj <- myddt(df = ddt, SPECIES = "CCATFISH")
ntickets <- function(N, gamma, p) {
n_values <- c(N, N * 1.1)
# Calculating nd using the binomial distribution
objective <- function(n) {
return(abs(N - qbinom(1 - gamma, n, p)))
}
nd <- round(optimise(objective, interval = n_values, maximum = FALSE)$minimum)
# Plotting discrete objective function vs n
objective_discrete <- function(n) {
return(N - qbinom(1 - gamma, n, p))
}
plot(n_values, objective_discrete(n_values), type='b', col="blue", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nd, ") gamma =", gamma, "N =", N, "discete"))
points(n_values, objective_discrete(n_values), col = 'black', pch = 19)
# Calculating nc using the normal approximation
objective <- function(n) {
return(abs(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p)))))
}
nc <- optimise(objective, interval = n_values, maximum = FALSE)$minimum
# Plotting continous objective function vs n
objective_continuous <- function(n) {
return(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p))))
}
plot(n_values, objective_continuous(n_values), type='b', col="black", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nc, ") gamma =", gamma, "N =", N, "continuous"))
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(400, 0.02, 0.95)
ntickets <- function(N, gamma, p) {
n_values <- c(N, N * 1.1)
# Calculating nd using the binomial distribution
objective <- function(n) {
return(abs(N - qbinom(1 - gamma, n, p)))
}
nd <- round(optimise(objective, interval = n_values, maximum = FALSE)$minimum)
# Plotting discrete objective function vs n
objective_discrete <- function(n) {
return(N - qbinom(1 - gamma, n, p))
}
plot(n_values, objective_discrete(n_values), type='b', col="blue", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nd, ") gamma =", gamma, "N =", N, "discete"))
# Calculating nc using the normal approximation
objective <- function(n) {
return(abs(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p)))))
}
nc <- optimise(objective, interval = n_values, maximum = FALSE)$minimum
# Plotting continous objective function vs n
objective_continuous <- function(n) {
return(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p))))
}
plot(n_values, objective_continuous(n_values), type='b', col="black", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nc, ") gamma =", gamma, "N =", N, "continuous"))
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(400, 0.02, 0.95)
View(ntickets)
ntickets(400, 0.02, 0.95)$n_values
ntickets(400, 0.02, 0.95)$n_values
ntickets <- function(N, gamma, p) {
n_values <- c(N, N * 1.1)
return(n_values)
# Calculating nd using the binomial distribution
objective <- function(n) {
return(abs(N - qbinom(1 - gamma, n, p)))
}
nd <- round(optimise(objective, interval = n_values, maximum = FALSE)$minimum)
# Plotting discrete objective function vs n
objective_discrete <- function(n) {
return(N - qbinom(1 - gamma, n, p))
}
plot(n_values, objective_discrete(n_values), type='b', col="blue", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nd, ") gamma =", gamma, "N =", N, "discete"))
# Calculating nc using the normal approximation
objective <- function(n) {
return(abs(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p)))))
}
nc <- optimise(objective, interval = n_values, maximum = FALSE)$minimum
# Plotting continous objective function vs n
objective_continuous <- function(n) {
return(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p))))
}
plot(n_values, objective_continuous(n_values), type='b', col="black", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nc, ") gamma =", gamma, "N =", N, "continuous"))
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(400, 0.02, 0.95)
ntickets <- function(N, gamma, p) {
# Calculating nd using the binomial distribution
objective <- function(n) {
return(abs(N - qbinom(1 - gamma, n, p)))
}
nd <- round(optimise(objective, interval = c(N, N * 1.1), maximum = FALSE)$minimum)
# Plotting discrete objective function vs n
objective_discrete <- function(n) {
return(N - qbinom(1 - gamma, n, p))
}
plot(seq(N, N * 1.1, by = 1), objective_discrete(n_values), type='b', col="blue", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nd, ") gamma =", gamma, "N =", N, "discete"))
# Calculating nc using the normal approximation
objective <- function(n) {
return(abs(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p)))))
}
nc <- optimise(objective, interval = c(N, N * 1.1), maximum = FALSE)$minimum
# Plotting continous objective function vs n
objective_continuous <- function(n) {
return(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p))))
}
plot(N:(N * 1.1), objective_continuous(N:(N * 1.1)), type='b', col="black", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nc, ") gamma =", gamma, "N =", N, "continuous"))
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(400, 0.02, 0.95)
ntickets <- function(N, gamma, p) {
# Calculating nd using the binomial distribution
objective <- function(n) {
return(abs(N - qbinom(1 - gamma, n, p)))
}
nd <- round(optimise(objective, interval = c(N, N * 1.1), maximum = FALSE)$minimum)
# Plotting discrete objective function vs n
objective_discrete <- function(n) {
return(N - qbinom(1 - gamma, n, p))
}
plot(seq(N, N * 1.1, by = 1), objective_discrete(seq(N, N * 1.1, by = 1)), type='b', col="blue", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nd, ") gamma =", gamma, "N =", N, "discete"))
# Calculating nc using the normal approximation
objective <- function(n) {
return(abs(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p)))))
}
nc <- optimise(objective, interval = c(N, N * 1.1), maximum = FALSE)$minimum
# Plotting continous objective function vs n
objective_continuous <- function(n) {
return(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p))))
}
plot(N:(N * 1.1), objective_continuous(N:(N * 1.1)), type='b', col="black", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nc, ") gamma =", gamma, "N =", N, "continuous"))
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(400, 0.02, 0.95)
ntickets <- function(N, gamma, p) {
# Calculating nd using the binomial distribution
objective <- function(n) {
return(abs(N - qbinom(1 - gamma, n, p)))
}
nd <- round(optimise(objective, interval = c(N, N * 1.1), maximum = FALSE)$minimum)
# Plotting discrete objective function vs n
objective_discrete <- function(n) {
return(N - qbinom(1 - gamma, n, p))
}
plot(seq(N, N * 1.1, by = 1), objective_discrete(seq(N, N * 1.1, by = 1)), type='b', col="blue", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nd, ") gamma =", gamma, "N =", N, "discete"))
abline(h = 0, col = 'red', lty = 2)
abline(v = nd, col= 'red', lty = 2)
# Calculating nc using the normal approximation
objective <- function(n) {
return(abs(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p)))))
}
nc <- optimise(objective, interval = c(N, N * 1.1), maximum = FALSE)$minimum
# Plotting continous objective function vs n
objective_continuous <- function(n) {
return(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p))))
}
plot(seq(N, N * 1.1, by = 0.1), objective_continuous(seq(N, N * 1.1, by = 0.1)), type='b', col="black", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nc, ") gamma =", gamma, "N =", N, "continuous"))
abline(h = 0, col = 'blue', lty = 2)
abline(v = nc, col = 'blue', lty = 2)
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(400, 0.02, 0.95)
ntickets <- function(N, gamma, p) {
# Calculating nd using the binomial distribution
objective <- function(n) {
return(abs(N - qbinom(1 - gamma, n, p)))
}
nd <- round(optimise(objective, interval = c(N, N * 1.1), maximum = FALSE)$minimum)
# Plotting discrete objective function vs n
objective_discrete <- function(n) {
return(N - qbinom(1 - gamma, n, p))
}
plot(seq(N, N * 1.1, by = 1), objective_discrete(seq(N, N * 1.1, by = 1)), type='b', col="blue", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nd, ") gamma =", gamma, "N =", N, "discete"))
abline(h = 0, col = 'red', lty = 2)
abline(v = nd, col= 'red', lty = 2)
# Calculating nc using the normal approximation
objective <- function(n) {
return(abs(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p)))))
}
nc <- optimise(objective, interval = c(N, N * 1.1), maximum = FALSE)$minimum
# Plotting continous objective function vs n
objective_continuous <- function(n) {
return(N - qnorm(1 - gamma, mean = n * p, sd = sqrt(n * p * (1 - p))))
}
plot(seq(N, N * 1.1, by = 0.5), objective_continuous(seq(N, N * 1.1, by = 0.5)), type='b', col="black", xlab="n", ylab="Objective", main=paste("Objective vs n to find optimal tickets sold (", nc, ") gamma =", gamma, "N =", N, "continuous"))
abline(h = 0, col = 'blue', lty = 2)
abline(v = nc, col = 'blue', lty = 2)
# Returning a named list containing nd, nc, N, p, and gamma
return(list(nd = nd, nc = nc, N = N, p = p, gamma = gamma))
}
ntickets(400, 0.02, 0.95)
