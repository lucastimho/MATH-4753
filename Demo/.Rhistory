ycurve=dgamma(xcurve, shape=2, scale=4)
polygon(c(3, xcurve, 6),c(0,ycurve,0), col="Red")
prob = round(pgamma(6, shape=2, scale=4) - pgamma(3, shape=2,scale=4), 4)
print(prob)
# Task 4
layout(matrix(1:4, nr=2,nc=2))
curve(dchisq(x,df=1),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=1")
curve(dchisq(x,df=2),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=2")
curve(dchisq(x,df=4),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=4")
curve(dchisq(x,df=20),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=20")
# Task 4
layout(matrix(1:4, nr=2,nc=2))
curve(dchisq(x,df=1),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=1")
curve(dchisq(x,df=2),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=2")
curve(dchisq(x,df=4),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=4")
curve(dchisq(x,df=20),xlim=c(0,10),ylim=c(0,0.5),lwd=2,
ylab="Chisq density", main="df=20")
# Task 4
layout(matrix(1:4, nr=2,nc=2))
curve(dchisq(x,df=1),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=1")
curve(dchisq(x,df=2),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=2")
curve(dchisq(x,df=4),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=4")
curve(dchisq(x,df=20),xlim=c(0,10),ylim=c(0,0.1),lwd=2,
ylab="Chisq density", main="df=20")
curve(dchisq(x,df=1),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=1")
curve(dchisq(x,df=2),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=2")
curve(dchisq(x,df=4),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=4")
curve(dchisq(x,df=20),xlim=c(0,10),ylim=c(0,0.05),lwd=2,
ylab="Chisq density", main="df=20")
curve(dchisq(x,df=1),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=1")
curve(dchisq(x,df=2),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=2")
curve(dchisq(x,df=4),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=4")
curve(dchisq(x,df=20),xlim=c(0,30),ylim=c(0,0.05),lwd=2,
ylab="Chisq density", main="df=20")
curve(dchisq(x,df=20),xlim=c(0,30),ylim=c(0,0.1),lwd=2,
ylab="Chisq density", main="df=20")
curve(dchisq(x,df=20),xlim=c(0,40),ylim=c(0,0.1),lwd=2,
ylab="Chisq density", main="df=20")
curve(dchisq(x,df=1),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=1")
curve(dchisq(x,df=2),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=2")
curve(dchisq(x,df=4),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=4")
curve(dchisq(x,df=4),xlim=c(0,10),ylim=c(0,0.5),lwd=2,
ylab="Chisq density", main="df=4")
par(mfrow=c(1,1))
curve(dchisq(x,df=2),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=2")
xcurve = seq(2, 4, length=1000)
ycurve = dchisq(xcurve, df=2)
polygon(c(2, xcurve, 4), c(0,ycurve,0), col="Red")
prob = round(pchisq(4, df=2) - pchisq(2, df=2), 4)
print(prob)
curve(dchisq(x,df=3),xlim=c(0,10),ylim=c(0,1),lwd=2,
ylab="Chisq density", main="df=3")
curve(dchisq(x,df=3),xlim=c(0,10),ylim=c(0,0.4),lwd=2,
ylab="Chisq density", main="df=3")
xcurve = seq(3, 5, length=1000)
ycurve = dchisq(xcurve, df=3)
polygon(c(3, xcurve, 5), c(0,ycurve,0), col="Red")
prob = round(pchisq(5, df=3) - pchisq(3, df=3), 4)
print(prob)
curve(dchisq(x,df=20),xlim=c(0,40),ylim=c(0,0.1),lwd=2,
ylab="Chisq density", main="df=2")
xcurve = seq(10, 21, length=1000)
ycurve = dchisq(xcurve, df=2)
polygon(c(10, xcurve, 21), c(0,ycurve,0), col="Red")
curve(dchisq(x,df=20),xlim=c(0,40),ylim=c(0,0.1),lwd=2,
ylab="Chisq density", main="df=2")
xcurve = seq(10, 21, length=1000)
ycurve = dchisq(xcurve, df=20)
polygon(c(10, xcurve, 21), c(0,ycurve,0), col="Red")
prob = round(pchisq(21, df=20) - pchisq(10, df=20), 4)
print(prob)
# Task 5
curve(dweibull(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), lwd=2, ylab="Weibull Density", main="Shape = 1, Scale = 1")
# Task 5
curve(dweibull(x, shape=3,scale=2), xlim=c(0,20), ylim=c(0,0.15), lwd=2, ylab="Weibull Density", main="Shape = 3, Scale = 2")
# Task 5
curve(dweibull(x, shape=3,scale=2), xlim=c(0,20), ylim=c(0,1), lwd=2, ylab="Weibull Density", main="Shape = 3, Scale = 2")
# Task 5
curve(dweibull(x, shape=3,scale=2), xlim=c(0,20), ylim=c(0,0.8), lwd=2, ylab="Weibull Density", main="Shape = 3, Scale = 2")
# Task 5
curve(dweibull(x, shape=3,scale=2), xlim=c(0,5), ylim=c(0,0.8), lwd=2, ylab="Weibull Density", main="Shape = 3, Scale = 2")
xcurve = seq(2, 5, length=1000)
ycurve=dweibull(xcurve, shape=3, scale=2)
polygon(c(2, xcurve, 5),c(0,ycurve,0), col="Red")
prob = round(pweibull(5, shape=3, scale=2) - pweibull(2, shape=3,scale=2), 4)
print(prob)
curve(dweibull(x, shape=6,scale=3), xlim=c(0,40), ylim=c(0,0.08), lwd=2, ylab="Weibull Density", main="Shape = 6, Scale = 3")
curve(dweibull(x, shape=6,scale=3), xlim=c(0,8), ylim=c(0,1), lwd=2, ylab="Weibull Density", main="Shape = 6, Scale = 3")
curve(dweibull(x, shape=6,scale=3), xlim=c(0,5), ylim=c(0,1), lwd=2, ylab="Weibull Density", main="Shape = 6, Scale = 3")
xcurve = seq(1, 3, length=1000)
ycurve=dweibull(xcurve, shape=6, scale=3)
polygon(c(1, xcurve, 3),c(0,ycurve,0), col="Red")
prob = round(pweibull(3, shape=6, scale=3) - pweibull(1, shape=6,scale=3), 4)
print(prob)
curve(dweibull(x, shape=2,scale=4), xlim=c(0,10), ylim=c(0,1), lwd=2, ylab="Weibull Density", main="Shape = 2, Scale = 4")
curve(dweibull(x, shape=2,scale=4), xlim=c(0,10), ylim=c(0,0.3), lwd=2, ylab="Weibull Density", main="Shape = 2, Scale = 4")
xcurve = seq(3, 6, length=1000)
ycurve=dweibull(xcurve, shape=2, scale=4)
polygon(c(3, xcurve, 6),c(0,ycurve,0), col="Red")
prob = round(pweibull(6, shape=2, scale=4) - pweibull(3, shape=2,scale=4), 4)
print(prob)
# Task 3
curve(dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), col="Blue", lwd=2, ylab="Gamma Density")
lines(curve(dgamma(x, shape=3,scale=1), col="Red", lwd=2))
lines(curve(dgamma(x, shape=5,scale=1), col="Green", lwd=2))
legend("topright", legend = c("Shape=1,Scale=1", "Shape=3,Scale=1", "Shape=5,Scale=1"), col=c("Blue","Red","Green"), lwd=2)
# Task 3
plot(x, curve(dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), col="Blue", lwd=2, ylab="Gamma Density"))
# Task 3
x <- seq(0, 10, 0.1)
plot(x, curve(dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), col="Blue", lwd=2, ylab="Gamma Density"))
lines(x, curve(dgamma(x, shape=3,scale=1), col="Red", lwd=2))
lines(x, curve(dgamma(x, shape=5,scale=1), col="Green", lwd=2))
legend("topright", legend = c("Shape=1,Scale=1", "Shape=3,Scale=1", "Shape=5,Scale=1"), col=c("Blue","Red","Green"), lwd=2)
# Task 3
x <- seq(0, 10, 0.1)
plot(x, dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), type="1", col="Blue", lwd=2, ylab="Gamma Density")
lines(x, dgamma(x, shape=3,scale=1), col="Red", lwd=2)
lines(x, dgamma(x, shape=5,scale=1), col="Green", lwd=2)
legend("topright", legend = c("Shape=1,Scale=1", "Shape=3,Scale=1", "Shape=5,Scale=1"), col=c("Blue","Red","Green"), lwd=2)
plot(x, dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), col="Blue", lwd=2, ylab="Gamma Density")
lines(x, dgamma(x, shape=3,scale=1), col="Red", lwd=2)
lines(x, dgamma(x, shape=5,scale=1), col="Green", lwd=2)
plot(x, dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), type="1", col="Blue", lwd=2, ylab="Gamma Density")
plot(x, dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), type="2", col="Blue", lwd=2, ylab="Gamma Density")
plot(x, dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), type=1, col="Blue", lwd=2, ylab="Gamma Density")
# Task 3
x <- seq(0, 10, 0.1)
plot(x, dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), col="Blue", lwd=2, ylab="Gamma Density")
lines(x, dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), col="Blue", lwd=2, ylab="Gamma Density")
# Task 3
x <- seq(0, 10, 0.1)
lines(x, dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), col="Blue", lwd=2, ylab="Gamma Density")
lines(x, dgamma(x, shape=3,scale=1), col="Red", lwd=2)
lines(x, dgamma(x, shape=5,scale=1), col="Green", lwd=2)
legend("topright", legend = c("Shape=1,Scale=1", "Shape=3,Scale=1", "Shape=5,Scale=1"), col=c("Blue","Red","Green"), lwd=2)
# Task 3
x <- seq(0, 10, 0.1)
lines(x, dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), col="Blue", lwd=2, ylab="Gamma Density")
lines(x, dgamma(x, shape=3,scale=1), col="Red", lwd=2)
# Task 3
x <- seq(0, 10, 0.1)
plot.new
lines(x, dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), col="Blue", lwd=2, ylab="Gamma Density")
lines(x, dgamma(x, shape=3,scale=1), col="Red", lwd=2)
plot(x, dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), type = "l", col="Blue", lwd=2, ylab="Gamma Density")
lines(x, dgamma(x, shape=3,scale=1), col="Red", lwd=2)
lines(x, dgamma(x, shape=5,scale=1), col="Green", lwd=2)
legend("topright", legend = c("Shape=1,Scale=1", "Shape=3,Scale=1", "Shape=5,Scale=1"), col=c("Blue","Red","Green"), lwd=2)
plot(x, dweibull(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), type = "l", col="Blue", lwd=2, ylab="Weibull Density")
lines(x, dweibull(x, shape=3,scale=1), col="Red", lwd=2)
lines(x, dweibull(x, shape=5,scale=1), col="Green", lwd=2)
legend("topright", legend = c("Shape=1,Scale=1", "Shape=3,Scale=1", "Shape=5,Scale=1"), col=c("Blue","Red","Green"), lwd=2)
plot(x, dweibull(x, shape=1,scale=1), xlim=c(0,3), ylim=c(0,5), type = "l", col="Blue", lwd=2, ylab="Weibull Density")
lines(x, dweibull(x, shape=3,scale=1), col="Red", lwd=2)
lines(x, dweibull(x, shape=5,scale=1), col="Green", lwd=2)
legend("topright", legend = c("Shape=1,Scale=1", "Shape=3,Scale=1", "Shape=5,Scale=1"), col=c("Blue","Red","Green"), lwd=2)
# Task 5
layout(matrix(1:4, nr=2,nc=2))
curve(dgamma(x, shape=1,scale=1), xlim=c(0,10), ylim=c(0,1), lwd=2, ylab="Weibull Density", main="Shape=1,Scale=1")
curve(dgamma(x, shape=3,scale=1), xlim=c(0,10), ylim=c(0,1), lwd=2, ylab="Weibull Density", main="Shape=3,Scale=1")
curve(dgamma(x, shape=5,scale=1), xlim=c(0,10), ylim=c(0,1), lwd=2, ylab="Weibull Density", main="Shape=5,Scale=1")
curve(dgamma(x, shape=1,scale=4), xlim=c(0,10), ylim=c(0,1), lwd=2, ylab="Weibull Density", main="Shape=1,Scale=4")
curve(dgamma(x, shape=1,scale=4), xlim=c(0,40), ylim=c(0,1), lwd=2, ylab="Weibull Density", main="Shape=1,Scale=4")
curve(dgamma(x, shape=1,scale=4), xlim=c(0,40), ylim=c(0,0.3), lwd=2, ylab="Weibull Density", main="Shape=1,Scale=4")
# Task 5
layout(matrix(1:4, nr=2,nc=2))
curve(dgamma(x, shape=1,scale=1), xlim=c(0,5), ylim=c(0,1), lwd=2, ylab="Weibull Density", main="Shape=1,Scale=1")
curve(dgamma(x, shape=3,scale=1), xlim=c(0,10), ylim=c(0,0.4), lwd=2, ylab="Weibull Density", main="Shape=3,Scale=1")
curve(dgamma(x, shape=5,scale=1), xlim=c(0,10), ylim=c(0,0.3), lwd=2, ylab="Weibull Density", main="Shape=5,Scale=1")
curve(dgamma(x, shape=1,scale=4), xlim=c(0,20), ylim=c(0,0.3), lwd=2, ylab="Weibull Density", main="Shape=1,Scale=4")
curve(dgamma(x, shape=3,scale=4), xlim=c(0,20), ylim=c(0,0.3), lwd=2, ylab="Weibull Density", main="Shape=1,Scale=4")
curve(dgamma(x, shape=3,scale=4), xlim=c(0,20), ylim=c(0,0.2), lwd=2, ylab="Weibull Density", main="Shape=1,Scale=4")
curve(dgamma(x, shape=3,scale=4), xlim=c(0,30), ylim=c(0,0.2), lwd=2, ylab="Weibull Density", main="Shape=1,Scale=4")
# Task 6
?dbeta()
curve(dgamma(x, shape1=1,shape2=2), xlim=c(0,5), ylim=c(0,1), lwd=2, ylab="Beta Density", main="Shape1=1,Shape2=2")
curve(dbeta(x, shape1=1,shape2=2), xlim=c(0,5), ylim=c(0,1), lwd=2, ylab="Beta Density", main="Shape1=1,Shape2=2")
# Task 6
layout(matrix(1:4, nr=2,nc=2))
curve(dbeta(x, shape1=1,shape2=2), xlim=c(0,5), ylim=c(0,1), lwd=2, ylab="Beta Density", main="Shape1=1,Shape2=2")
curve(dbeta(x, shape1=1,shape2=2), xlim=c(0,2), ylim=c(0,5), lwd=2, ylab="Beta Density", main="Shape1=1,Shape2=2")
curve(dbeta(x, shape1=1,shape2=2), xlim=c(0,2), ylim=c(0,3), lwd=2, ylab="Beta Density", main="Shape1=1,Shape2=2")
curve(dbeta(x, shape1=1,shape2=2), xlim=c(0,2), ylim=c(0,1.5), lwd=2, ylab="Beta Density", main="Shape1=1,Shape2=2")
curve(dbeta(x, shape1=3,shape2=1), xlim=c(0,10), ylim=c(0,0.4), lwd=2, ylab="Beta Density", main="Shape1=3,Shape2=1")
curve(dbeta(x, shape1=3,shape2=1), xlim=c(0,2), ylim=c(0,5), lwd=2, ylab="Beta Density", main="Shape1=3,Shape2=1")
curve(dbeta(x, shape=5,scale=1), xlim=c(0,2), ylim=c(0,5), lwd=2, ylab="Beta Density", main="Shape=5,Scale=1")
curve(dbeta(x, shape1=5,shape2=1), xlim=c(0,2), ylim=c(0,5), lwd=2, ylab="Beta Density", main="Shape=5,Scale=1")
curve(dbeta(x, shape=3,scale=4), xlim=c(0,2), ylim=c(0,5), lwd=2, ylab="Beta Density", main="Shape1=3,Shape2=4")
curve(dbeta(x, shape1=3,shape2=4), xlim=c(0,2), ylim=c(0,5), lwd=2, ylab="Beta Density", main="Shape1=3,Shape2=4")
curve(dbeta(x, shape1=3,shape2=4), xlim=c(0,1), ylim=c(0,3), lwd=2, ylab="Beta Density", main="Shape1=3,Shape2=4")
curve(dbeta(x, shape1=3,shape2=2), xlim=c(0,5), ylim=c(0,0.8), lwd=2, ylab="Beta Density", main="Shape1=3, Shape2=2")
curve(dbeta(x, shape1=3,shape2=2), xlim=c(0,2), ylim=c(0,5), lwd=2, ylab="Beta Density", main="Shape1=3, Shape2=2")
curve(dbeta(x, shape1=3,shape2=2), xlim=c(0,2), ylim=c(0,3), lwd=2, ylab="Beta Density", main="Shape1=3, Shape2=2")
xcurve = seq(0.5, 1, length=1000)
ycurve=dbeta(xcurve, shape1=3, shape2=2)
polygon(c(0.5, xcurve, 1),c(0,ycurve,0), col="Red")
prob = round(pbeta(1, shape1=3, shape2=2) - pbeta(0.5, shape1=3,shape2=2), 4)
print(prob)
curve(dbeta(x, shape1=6,shape2=3), xlim=c(0,5), ylim=c(0,1), lwd=2, ylab="Beta Density", main="Shape1=6, Shape2=3")
curve(dbeta(x, shape1=6,shape2=3), xlim=c(0,2), ylim=c(0,3), lwd=2, ylab="Beta Density", main="Shape1=6, Shape2=3")
xcurve = seq(0.5, 0.75, length=1000)
ycurve=dweibull(xcurve, shape=6, scale=3)
polygon(c(0.5, xcurve, 0.75),c(0,ycurve,0), col="Red")
prob = round(pbeta(0.75, shape1=6, shape2=3) - pbeta(0.5, shape1=6,shape2=3), 4)
ycurve=dweibull(xcurve, shape1=6, shape2=3)
polygon(c(0.5, xcurve, 0.75),c(0,ycurve,0), col="Red")
ycurve=dbeta(xcurve, shape1=6, shape2=3)
polygon(c(0.5, xcurve, 0.75),c(0,ycurve,0), col="Red")
prob = round(pbeta(0.75, shape1=6, shape2=3) - pbeta(0.5, shape1=6,shape2=3), 4)
print(prob)
curve(dbeta(x, shape1=2,shape2=4), xlim=c(0,3), ylim=c(0,2), lwd=2, ylab="Beta Density", main="Shape1=2, Shape2=4")
curve(dbeta(x, shape1=2,shape2=4), xlim=c(0,2), ylim=c(0,3), lwd=2, ylab="Beta Density", main="Shape1=2, Shape2=4")
xcurve = seq(0, 0.25, length=1000)
ycurve=dbeta(xcurve, shape1=2, shape2=4)
polygon(c(0, xcurve, 0.25),c(0,ycurve,0), col="Red")
prob = round(pbeta(0.25, shape1=2, shape2=4) - pbeta(0, shape1=2,shape2=4), 4)
print(prob)
library(s20x)
data("course.df")
course.df
tt <- table(course.df$Gender, course.df$Degree)
addt <- addmargins(tt)
addt
print(0.5*0.1^2)
print(1.2-0.18-0.2+0.005)
print(2*0.825/3)
library(MATH4753LHO24)
install.packages(c("bayesplot", "boot", "bslib", "curl", "data.table", "DBI", "dbplyr", "DT", "GGally", "ggplot2", "htmltools", "httpuv", "igraph", "lattice", "loo", "ragg", "RcppEigen", "remotes", "renv", "rmarkdown", "rstan", "rstudioapi", "sass", "shiny", "StanHeaders", "survival", "systemfonts", "tidyselect", "tinytex", "usethis", "xfun"))
install.packages(c("bayesplot", "boot", "bslib", "curl", "data.table", "DBI", "dbplyr", "DT", "GGally", "ggplot2", "htmltools", "httpuv", "igraph", "lattice", "loo", "ragg", "RcppEigen", "remotes", "renv", "rmarkdown", "rstan", "rstudioapi", "sass", "shiny", "StanHeaders", "survival", "systemfonts", "tidyselect", "tinytex", "usethis", "xfun"))
install.packages(c("bayesplot", "boot", "bslib", "curl", "data.table", "DBI", "dbplyr", "DT", "GGally", "ggplot2", "htmltools", "httpuv", "igraph", "lattice", "loo", "ragg", "RcppEigen", "remotes", "renv", "rmarkdown", "rstan", "rstudioapi", "sass", "shiny", "StanHeaders", "survival", "systemfonts", "tidyselect", "tinytex", "usethis", "xfun"))
install.packages(c("bayesplot", "boot", "bslib", "curl", "data.table", "DBI", "dbplyr", "DT", "GGally", "ggplot2", "htmltools", "httpuv", "igraph", "lattice", "loo", "ragg", "RcppEigen", "remotes", "renv", "rmarkdown", "rstan", "rstudioapi", "sass", "shiny", "StanHeaders", "survival", "systemfonts", "tidyselect", "tinytex", "usethis", "xfun"))
install.packages(c("bayesplot", "boot", "bslib", "curl", "data.table", "DBI", "dbplyr", "DT", "GGally", "ggplot2", "htmltools", "httpuv", "igraph", "lattice", "loo", "ragg", "RcppEigen", "remotes", "renv", "rmarkdown", "rstan", "rstudioapi", "sass", "shiny", "StanHeaders", "survival", "systemfonts", "tidyselect", "tinytex", "usethis", "xfun"))
install.packages(c("bayesplot", "boot", "bslib", "curl", "data.table", "DBI", "dbplyr", "DT", "GGally", "ggplot2", "htmltools", "httpuv", "igraph", "lattice", "loo", "ragg", "RcppEigen", "remotes", "renv", "rmarkdown", "rstan", "rstudioapi", "sass", "shiny", "StanHeaders", "survival", "systemfonts", "tidyselect", "tinytex", "usethis", "xfun"))
install.packages(c("bayesplot", "boot", "bslib", "curl", "data.table", "DBI", "dbplyr", "DT", "GGally", "ggplot2", "htmltools", "httpuv", "igraph", "lattice", "loo", "ragg", "RcppEigen", "remotes", "renv", "rmarkdown", "rstan", "rstudioapi", "sass", "shiny", "StanHeaders", "survival", "systemfonts", "tidyselect", "tinytex", "usethis", "xfun"))
install.packages(c("bayesplot", "boot", "bslib", "curl", "data.table", "DBI", "dbplyr", "DT", "GGally", "ggplot2", "htmltools", "httpuv", "igraph", "lattice", "loo", "ragg", "RcppEigen", "remotes", "renv", "rmarkdown", "rstan", "rstudioapi", "sass", "shiny", "StanHeaders", "survival", "systemfonts", "tidyselect", "tinytex", "usethis", "xfun"))
library(MATH4753LHO24)
# Task 6
MATH4753LHO24::mycltb(5, 10000, p=0.3)
# Task 6
MATH4753LHO24::mycltb(5, 10000, 0.3)
# Task 6
MATH4753LHO24::mycltb(5, 10000, 0.3)
detach("package:base", unload = TRUE)
MATH4753LHO24::mycltb(5, 10000, 0.3)
# Task 6
library(MATH4753LHO24)
MATH4753LHO24::mycltb(5, 10000, 0.3)
# Task 6
library(MATH4753LHO24)
MATH4753LHO24::mycltb(5, 10000, 0.3)
# Task 5
mycltp=function(n,iter,lambda=10,...){
## r-random sample from the Poisson
y=rpois(n*iter,lambda=lambda)
## Place these numbers into a matrix
## The columns will correspond to the iteration and the rows will equal the sample size n
data=matrix(y,nr=n,nc=iter,byrow=TRUE)
## apply the function mean to the columns (2) of the matrix
## these are placed in a vector w
w=apply(data,2,mean)
## We will make a histogram of the values in w
## How high should we make y axis?
## All the values used to make a histogram are placed in param (nothing is plotted yet)
param=hist(w,plot=FALSE)
## Since the histogram will be a density plot we will find the max density
ymax=max(param$density)
## To be on the safe side we will add 10% more to this
ymax=1.1*ymax
## Make a suitable layout for graphing
layout(matrix(c(1,1,2,3),nr=2,nc=2, byrow=TRUE))
## Now we can make the histogram
hist(w,freq=FALSE,  ylim=c(0,ymax), col=rainbow(max(w)),
main=paste("Histogram of sample mean","\n", "sample size= ",n," iter=",iter," lambda=",lambda,sep=""),
xlab="Sample mean",...)
## add a density curve made from the sample distribution
#lines(density(w),col="Blue",lwd=3) # add a density plot
## Add a theoretical normal curve
curve(dnorm(x,mean=lambda,sd=sqrt(lambda/n)),add=TRUE,col="Red",lty=2,lwd=3) # add a theoretical curve
# Now make a new plot
# Since y is discrete we should use a barplot
barplot(table(y)/(n*iter),col=rainbow(max(y)), main="Barplot of sampled y", ylab ="Rel. Freq",xlab="y" )
x=0:max(y)
plot(x,dpois(x,lambda=lambda),type="h",lwd=5,col=rainbow(max(y)),
main="Probability function for Poisson", ylab="Probability",xlab="y")
}
mycltp(2, 10000, 4)
mycltp(3, 10000, 4)
mycltp(5, 10000, 4)
mycltp(10, 10000, 4)
mycltp(20, 10000, 4)
mycltp(2, 10000)
mycltp(3, 10000)
mycltp(5, 10000)
mycltp(10, 10000)
mycltp(20, 10000)
# Task 3
mycltu=function(n,iter,a=0,b=10){
## r-random sample from the uniform
y=runif(n*iter,a,b)
## Place these numbers into a matrix
## The columns will correspond to the iteration and the rows will equal the sample size n
data=matrix(y,nr=n,nc=iter,byrow=TRUE)
## apply the function mean to the columns (2) of the matrix
## these are placed in a vector w
w=apply(data,2,mean)
## We will make a histogram of the values in w
## How high should we make y axis?
## All the values used to make a histogram are placed in param (nothing is plotted yet)
param=hist(w,plot=FALSE)
## Since the histogram will be a density plot we will find the max density
ymax=max(param$density)
## To be on the safe side we will add 10% more to this
ymax=1.1*ymax
## Now we can make the histogram
hist(w,freq=FALSE,  ylim=c(0,ymax), main=paste("Histogram of sample mean",
"\n", "sample size= ",n,sep=""),xlab="Sample mean")
## add a density curve made from the sample distribution
lines(density(w),col="Blue",lwd=3) # add a density plot
## Add a theoretical normal curve
curve(dnorm(x,mean=(a+b)/2,sd=(b-a)/(sqrt(12*n))),add=TRUE,col="Red",lty=2,lwd=3) # add a theoretical curve
## Add the density from which the samples were taken
curve(dunif(x,a,b),add=TRUE,lwd=4)
}
mycltu(1, 10000)
mycltu(2, 10000)
mycltu(3, 10000)
mycltu(5, 10000)
mycltu(10, 10000)
mycltu(30, 10000)
# Task 4
mycltb=function(n,iter,p=0.3,...){
## r-random sample from the Binomial
y=rbinom(n*iter,size=n,prob=p)
## Place these numbers into a matrix
## The columns will correspond to the iteration and the rows will equal the sample size n
data=matrix(y,nr=n,nc=iter,byrow=TRUE)
## apply the function mean to the columns (2) of the matrix
## these are placed in a vector w
w=apply(data,2,mean)
## We will make a histogram of the values in w
## How high should we make y axis?
## All the values used to make a histogram are placed in param (nothing is plotted yet)
param=hist(w,plot=FALSE)
## Since the histogram will be a density plot we will find the max density
ymax=max(param$density)
## To be on the safe side we will add 10% more to this
ymax=1.1*ymax
## Now we can make the histogram
## freq=FALSE means take a density
hist(w,freq=FALSE,  ylim=c(0,ymax),
main=paste("Histogram of sample mean","\n", "sample size= ",n,sep=""),
xlab="Sample mean",...)
## add a density curve made from the sample distribution
#lines(density(w),col="Blue",lwd=3) # add a density plot
## Add a theoretical normal curve
curve(dnorm(x,mean=n*p,sd=sqrt(p*(1-p))),add=TRUE,col="Red",lty=2,lwd=3)
}
mycltb(4, 10000)
mycltb(5, 10000)
mycltb(10, 10000)
mycltb(20, 10000)
mycltb(4, 10000, p=0.7)
mycltb(5, 10000, p=0.7)
mycltb(10, 10000, p=0.7)
mycltb(20, 10000, p=0.7)
mycltb(4, 10000, p=0.5)
mycltb(5, 10000, p=0.5)
mycltb(10, 10000, p=0.5)
mycltb(20, 10000, p=0.5)
set.seed(35); sam=round(rnorm(20,mean=10,sd=4),2)
MATH4753LHO24::myboot2(x=sam)
# Task 8
library(MATH4753LHO24)
set.seed(35); sam=round(rnorm(20,mean=10,sd=4),2)
MATH4753LHO24::myboot2(x=sam)
# Task 2
set.seed(35)
sam=round(rnorm(20,mean=10,sd=4),2)
unique(sample(sam,20,replace=TRUE))
unique(sample(sam,20,replace=TRUE))
unique(sample(sam,20,replace=TRUE))
unique(sample(sam,20,replace=TRUE))
unique(sample(sam,20,replace=TRUE))
unique(sample(sam,20,replace=FALSE))
unique(sample(sam,20,replace=FALSE))
unique(sample(sam,20,replace=FALSE))
unique(sample(sam,20,replace=FALSE))
unique(sample(sam,20,replace=FALSE))
# Task 3
myboot2<-function(iter=10000,x,fun="mean",alpha=0.05,cx=1.5,...){  #Notice where the ... is repeated in the code
n=length(x)   #sample size
y=sample(x,n*iter,replace=TRUE)
rs.mat=matrix(y,nr=n,nc=iter,byrow=TRUE)
xstat=apply(rs.mat,2,fun) # xstat is a vector and will have iter values in it
ci=quantile(xstat,c(alpha/2,1-alpha/2))# Nice way to form a confidence interval
# A histogram follows
# The object para will contain the parameters used to make the histogram
para=hist(xstat,freq=FALSE,las=1,
main=paste("Histogram of Bootstrap sample statistics","\n","alpha=",alpha," iter=",iter,sep=""),
...)
#mat will be a matrix that contains the data, this is done so that I can use apply()
mat=matrix(x,nr=length(x),nc=1,byrow=TRUE)
#pte is the point estimate
#This uses whatever fun is
pte=apply(mat,2,fun)
abline(v=pte,lwd=3,col="Black")# Vertical line
segments(ci[1],0,ci[2],0,lwd=4)      #Make the segment for the ci
text(ci[1],0,paste("(",round(ci[1],2),sep=""),col="Red",cex=cx)
text(ci[2],0,paste(round(ci[2],2),")",sep=""),col="Red",cex=cx)
# plot the point estimate 1/2 way up the density
text(pte,max(para$density)/2,round(pte,2),cex=cx)
invisible(list(ci=ci,fun=fun,x=x))# Some output to use if necessary
}
set.seed(39); sam=rnorm(25,mean=25,sd=10)
myboot2(10000,x=sam,fun="mean",alpha=0.05,xlab="mean",col="Purple",cx=1.5)
set.seed(30); sam=rchisq(20,df=3)
myboot2(10000,x=sam,fun="mean",alpha=0.05,xlab="mean",col="Purple",cx=1.5)
set.seed(40); sam=rgamma(30,shape=2,scale=3)
myboot2(10000,x=sam,fun="mean",alpha=0.05,xlab="mean",col="Purple",cx=1.5)
set.seed(10); sam=rbeta(20,shape1=3,shape2=4)
myboot2(10000,x=sam,fun="mean",alpha=0.05,xlab="mean",col="Purple",cx=1.5)
# Task 4
sam=c(1,1,1,2,2,2,2,3,3,3,4,4)
myboot2(10000, x=sam, fun="median", alpha=0.05, xlab="median",col="Purple",cx=1.5)
knitr::opts_chunk$set(echo = TRUE)
getwd()
unique(sample(sam,20,replace=TRUE))
unique(sample(sam,20,replace=TRUE))
unique(sample(sam,20,replace=TRUE))
unique(sample(sam,20,replace=TRUE))
unique(sample(sam,20,replace=TRUE))
unique(sample(sam,20,replace=FALSE))
# Task 8
library(MATH4753LHO24)
data <- MATH4753LHO24::fire
MATH4753LHO24::myboot2(x=data$distance)
View(data)
data <- MATH4753LHO24::fire$DISTANCE
MATH4753LHO24::myboot2(x=data)
setwd("~/MATH-4753-Stats/Demo")
qt((1 - 0.98)/2, 25 - 1)
?qt()
data <- read.csv("INVQUAD.csv")
head(data)
View(data)
library(dyplyr)
library(dplyr)
View(data)
data.g %>% filter(data$PLANT == "Gas")
data.g <- data %>% filter(data$PLANT == "Gas")
data.e <- data %>% filter(data$PLANT == "Electric")
head(data.g)
head(data.e)
var.test(data.e$PLANT, data.g$PLANT)
?var.test()
var.test(data.e$INV.QUAD, data.g$INV.QUAD)
var.test(data.g$INV.QUAD, data.e$INV.QUAD)
var.test(data.e$INV.QUAD, data.g$INV.QUAD)
sd(data.g$INV.QUAD)
sd(data.e$INV.QUAD)
t.test(data.e$INV.QUAD, data.g$INV.QUAD, var.equal = TRUE)
t.test(data.e$INV.QUAD, data.g$INV.QUAD, paired = TRUE)
t.test(data.g$INV.QUAD, data.e$INV.QUAD, var.equal = TRUE)
library(s20x)
kwhrs <- read.csv("KWHRS.csv")
head(kwhrs)
kwhrs.lm <- lm(kwhrs$SIZE, kwhrs$USAGE)
lm(kwhrs$SIZE, kwhrs$USAGE)
lm(kwhrs$USAGE, kwhrs$SIZE)
kwhrs.lm <- lm(kwhrs$USAGE, kwhrs$SIZE)
summary(kwhrs.lm)
kwhrs.lm <- lm(kwhrs$USAGE~kwhrs$SIZE)
summary(kwhrs.lm)
?ciReg()
ciReg(kwhrs.lm)
?quad()
(sqrt(0.0159568*138)/sqrt(1 - 0.0159568))
?pt()
1 - pt(1.49591, 138)
pt(1.49591, 138)
16 * 14
0.01196426061 - qt((1 - 0.95)/2, 142) * 0.00115947187
0.01196426061 + qt((1 - 0.95)/2, 142) * 0.00115947187
1 - pnorm(11, mu=10, sd=4)
?pnorm()
1 - pnorm(11, mean=10, sd=4)
pnorm(20, 20, 10) - pnorm(10, 20, 10)
1 - qnorm(0.7)
2 * qnorm(1 - qnorm(0.7))
2 * qnorm(qnorm(0.7))
qt(2 * 10^-16, 138)
